/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PersonService_H
#define PersonService_H

#include <thrift/TDispatchProcessor.h>
#include "Person_types.h"

namespace IDV {

class PersonServiceIf {
 public:
  virtual ~PersonServiceIf() {}
  virtual void getPersonById(Person& _return, const int32_t id) = 0;
  virtual bool deletePersonById(const int32_t id) = 0;
};

class PersonServiceIfFactory {
 public:
  typedef PersonServiceIf Handler;

  virtual ~PersonServiceIfFactory() {}

  virtual PersonServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PersonServiceIf* /* handler */) = 0;
};

class PersonServiceIfSingletonFactory : virtual public PersonServiceIfFactory {
 public:
  PersonServiceIfSingletonFactory(const boost::shared_ptr<PersonServiceIf>& iface) : iface_(iface) {}
  virtual ~PersonServiceIfSingletonFactory() {}

  virtual PersonServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PersonServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PersonServiceIf> iface_;
};

class PersonServiceNull : virtual public PersonServiceIf {
 public:
  virtual ~PersonServiceNull() {}
  void getPersonById(Person& /* _return */, const int32_t /* id */) {
    return;
  }
  bool deletePersonById(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _PersonService_getPersonById_args__isset {
  _PersonService_getPersonById_args__isset() : id(false) {}
  bool id :1;
} _PersonService_getPersonById_args__isset;

class PersonService_getPersonById_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  PersonService_getPersonById_args(const PersonService_getPersonById_args&);
  PersonService_getPersonById_args& operator=(const PersonService_getPersonById_args&);
  PersonService_getPersonById_args() : id(0) {
  }

  virtual ~PersonService_getPersonById_args() throw();
  int32_t id;

  _PersonService_getPersonById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const PersonService_getPersonById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PersonService_getPersonById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonService_getPersonById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PersonService_getPersonById_args& obj);

};


class PersonService_getPersonById_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~PersonService_getPersonById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PersonService_getPersonById_pargs& obj);

};

typedef struct _PersonService_getPersonById_result__isset {
  _PersonService_getPersonById_result__isset() : success(false) {}
  bool success :1;
} _PersonService_getPersonById_result__isset;

class PersonService_getPersonById_result {
 public:

  static const char* ascii_fingerprint; // = "26CF5127EFE9ADB17830088D72D6FBFD";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0xCF,0x51,0x27,0xEF,0xE9,0xAD,0xB1,0x78,0x30,0x08,0x8D,0x72,0xD6,0xFB,0xFD};

  PersonService_getPersonById_result(const PersonService_getPersonById_result&);
  PersonService_getPersonById_result& operator=(const PersonService_getPersonById_result&);
  PersonService_getPersonById_result() {
  }

  virtual ~PersonService_getPersonById_result() throw();
  Person success;

  _PersonService_getPersonById_result__isset __isset;

  void __set_success(const Person& val);

  bool operator == (const PersonService_getPersonById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PersonService_getPersonById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonService_getPersonById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PersonService_getPersonById_result& obj);

};

typedef struct _PersonService_getPersonById_presult__isset {
  _PersonService_getPersonById_presult__isset() : success(false) {}
  bool success :1;
} _PersonService_getPersonById_presult__isset;

class PersonService_getPersonById_presult {
 public:

  static const char* ascii_fingerprint; // = "26CF5127EFE9ADB17830088D72D6FBFD";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0xCF,0x51,0x27,0xEF,0xE9,0xAD,0xB1,0x78,0x30,0x08,0x8D,0x72,0xD6,0xFB,0xFD};


  virtual ~PersonService_getPersonById_presult() throw();
  Person* success;

  _PersonService_getPersonById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PersonService_getPersonById_presult& obj);

};

typedef struct _PersonService_deletePersonById_args__isset {
  _PersonService_deletePersonById_args__isset() : id(false) {}
  bool id :1;
} _PersonService_deletePersonById_args__isset;

class PersonService_deletePersonById_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  PersonService_deletePersonById_args(const PersonService_deletePersonById_args&);
  PersonService_deletePersonById_args& operator=(const PersonService_deletePersonById_args&);
  PersonService_deletePersonById_args() : id(0) {
  }

  virtual ~PersonService_deletePersonById_args() throw();
  int32_t id;

  _PersonService_deletePersonById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const PersonService_deletePersonById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PersonService_deletePersonById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonService_deletePersonById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PersonService_deletePersonById_args& obj);

};


class PersonService_deletePersonById_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~PersonService_deletePersonById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PersonService_deletePersonById_pargs& obj);

};

typedef struct _PersonService_deletePersonById_result__isset {
  _PersonService_deletePersonById_result__isset() : success(false) {}
  bool success :1;
} _PersonService_deletePersonById_result__isset;

class PersonService_deletePersonById_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  PersonService_deletePersonById_result(const PersonService_deletePersonById_result&);
  PersonService_deletePersonById_result& operator=(const PersonService_deletePersonById_result&);
  PersonService_deletePersonById_result() : success(0) {
  }

  virtual ~PersonService_deletePersonById_result() throw();
  bool success;

  _PersonService_deletePersonById_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const PersonService_deletePersonById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PersonService_deletePersonById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonService_deletePersonById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PersonService_deletePersonById_result& obj);

};

typedef struct _PersonService_deletePersonById_presult__isset {
  _PersonService_deletePersonById_presult__isset() : success(false) {}
  bool success :1;
} _PersonService_deletePersonById_presult__isset;

class PersonService_deletePersonById_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~PersonService_deletePersonById_presult() throw();
  bool* success;

  _PersonService_deletePersonById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PersonService_deletePersonById_presult& obj);

};

class PersonServiceClient : virtual public PersonServiceIf {
 public:
  PersonServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PersonServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getPersonById(Person& _return, const int32_t id);
  void send_getPersonById(const int32_t id);
  void recv_getPersonById(Person& _return);
  bool deletePersonById(const int32_t id);
  void send_deletePersonById(const int32_t id);
  bool recv_deletePersonById();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PersonServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PersonServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PersonServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getPersonById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePersonById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PersonServiceProcessor(boost::shared_ptr<PersonServiceIf> iface) :
    iface_(iface) {
    processMap_["getPersonById"] = &PersonServiceProcessor::process_getPersonById;
    processMap_["deletePersonById"] = &PersonServiceProcessor::process_deletePersonById;
  }

  virtual ~PersonServiceProcessor() {}
};

class PersonServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PersonServiceProcessorFactory(const ::boost::shared_ptr< PersonServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PersonServiceIfFactory > handlerFactory_;
};

class PersonServiceMultiface : virtual public PersonServiceIf {
 public:
  PersonServiceMultiface(std::vector<boost::shared_ptr<PersonServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PersonServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PersonServiceIf> > ifaces_;
  PersonServiceMultiface() {}
  void add(boost::shared_ptr<PersonServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getPersonById(Person& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonById(_return, id);
    }
    ifaces_[i]->getPersonById(_return, id);
    return;
  }

  bool deletePersonById(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePersonById(id);
    }
    return ifaces_[i]->deletePersonById(id);
  }

};

} // namespace

#endif
